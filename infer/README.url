
# readme

## url

*	[main url](http://amonks.github.io/inference/build/index-dev.html)

### example url with query parameters

*	[routing but not POIs, zoomed in extra](http://amonks.github.io/inference/build/index-dev.html?bRoute=true&bPoi=false&zoomLevel=14)

### parameter list (with defaults)

*	`auto=2C7RC1BG3DR614265` passed to json

*	`bPan=false` enable auto panning (only relevant if bRoute is true)

*	`bPoi=true` enable POI features

*	`bRoute=false` enable route features

*	`delay=15000` number of milliseconds to wait between each JSON call

*	`id=abc` not used

*	`maxActualSegments=1`

*	`pushMax=9`

*	`reset=true`

*	`since=2013-01-01T00:00:15.340Z`

*	`skip=0` number of points to skip each iteration of the route creation

*	`zoomLevel=16`


## structure

*	**`build/`:** this is generated by `grunt`. It's what should get served.

*	**`css/`:** this contains various css libraries. everything in here gets concatenated together into `/build/css.css` and then minified into `/build/css.min.css`

*	**`jade/`:** this contains templates which generate the html of the site.

	*	**`jade/index.jade`:** this is the main layout. it calls the other templates through `include` statements

	*	**`jade/includes/`:** this contains smaller templates which are included into the main page

		*	**`jade/includes/dependencies.jade`:** this is the various `<script>` and `<link>` tags that go into the head of the document

		*	**`jade/includes/fake-places.jade`:** this generates 3 fake pois for the list to test the ui. It's only inserted into `dev.html`.

		*	**`jade/includes/getJSONurl.jade`:** this inserts a one of several `getJSONurl()` functions into the document, based on config variables passed to jade. This allows `dev.html` to use proxied JSON data while `index.html` uses JSON data directly from the server.

		*	**`jade/includes/poi-list-item-template.hbs.jade`:** this is inserted into the head of the document as a handlebars template. Javascript uses that template to render individual POIs with details in the list.

		*	**`jade/includes/poi-radar-drawer.jade`:** this is the poi radar drawer on the left side of the page

		*	**`jade/includes/poi-help-drawer.jade`:** this is the help drawer on the right side of the page

		*	**`jade/includes/slide-in.jade`:** this is a script inserted into the bottom of the html document that handles the sliding of the drawers. due to a timing issue it can't be called through a `script src` tag

*	**`js/`:** this contains various javascript files. everything in here gets concatenated together into `/build/js.js` and then minified into `/build/js.min.js`

	*	**`js/globals.js`** this file declares global variables, it also handles query string parsing for url options

	*	**`js/map.js`:** this is the main map app. I pretty much just moved all the existing javascript in here when I started.

	*	**`js/helpcontrol.js`:** this is the controller for the help button

	*	**`js/radarcontrol.js`:** this is the controller for the poi radar view button

	*	**`js/mocks.js`:** this generates fake pois for when the google places api is blocking us. It's not currently used. 

	*	**`js/places.js`:** this contains all of the functions for dealing with POIs, from adding map-markers through places api requests and populating the radar list.

	*	**`js/poi-filters.js`:** this contains functions for filtering the POI list

	*	**`js/utilities.js`:** this contains various utility/helper functions

	*	**`js/handlebars-v1.3.0.js`:** this is the library used for client-side html templating

	*	**`js/jquery.raty.js`:** this is the library used for converting a rating into star images

	*	**`js/richmarker.js`:** this is the library used for adding html markers to the map

	*	**`js/snap.js`:** this is the library used for the sliding drawers

	*	**`js/purl.js`:** this is the jquery plugin used for url parsing

*	**`public/`:** everything in this folder is copied directly into `build/`. It includes images and fonts and whatnot.

*	**`stylus/`:** this contains custom styles. They're preprocessed into `css/style.css` and then handled with the rest of the css.

*	**`text/`:** this contains long-form text used in the app. currently the contents of the help drawer.


